--- !ruby/object:RI::ClassDescription 
attributes: []

class_methods: []

comment: 
- !ruby/struct:SM::Flow::P 
  body: "Dependencies control what classes are needed for the controller to run its course. This is an alternative to doing explicit <tt>require</tt> statements that bring a number of benefits. It's more succinct, communicates what type of dependency we're talking about, can trigger special behavior (as in the case of <tt>observer</tt>), and enables Rails to be clever about reloading in cached environments like FCGI. Example:"
- !ruby/struct:SM::Flow::VERB 
  body: "  class ApplicationController &lt; ActionController::Base\n    model    :account, :company, :person, :project, :category\n    helper   :access_control\n    service  :notifications, :billings\n    observer :project_change_observer\n  end\n"
- !ruby/struct:SM::Flow::P 
  body: "Please note that a controller like ApplicationController will automatically attempt to require_dependency on a model of its singuralized name and a helper of its name. If nothing is found, no error is raised. This is especially useful for concrete controllers like PostController:"
- !ruby/struct:SM::Flow::VERB 
  body: "  class PostController &lt; ApplicationController\n    # model  :post (already required)\n    # helper :post (already required)\n  end\n"
- !ruby/struct:SM::Flow::P 
  body: Also note, that if the models follow the pattern of just 1 class per file in the form of MyClass =&gt; my_class.rb, then these classes don't have to be required as Active Support will auto-require them.
constants: []

full_name: ActionController::Dependencies::ClassMethods
includes: []

instance_methods: []

name: ClassMethods
superclass: 
