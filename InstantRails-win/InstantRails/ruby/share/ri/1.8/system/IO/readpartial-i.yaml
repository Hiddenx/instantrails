--- !ruby/object:RI::MethodDescription 
aliases: []

block_params: 
comment: 
- !ruby/struct:SM::Flow::P 
  body: Reads at most <em>maxlen</em> bytes from the I/O stream but it blocks only if <em>ios</em> has no data immediately available. If the optional <em>outbuf</em> argument is present, it must reference a String, which will receive the data. It raises <tt>EOFError</tt> on end of file.
- !ruby/struct:SM::Flow::P 
  body: readpartial is designed for streams such as pipe, socket, tty, etc. It blocks only when no data immediately available. This means that it blocks only when following all conditions hold.
- !ruby/object:SM::Flow::LIST 
  contents: 
  - !ruby/struct:SM::Flow::LI 
    label: "*"
    body: the buffer in the IO object is empty.
  - !ruby/struct:SM::Flow::LI 
    label: "*"
    body: the content of the stream is empty.
  - !ruby/struct:SM::Flow::LI 
    label: "*"
    body: the stream is not reached to EOF.
  type: :BULLET
- !ruby/struct:SM::Flow::P 
  body: When readpartial blocks, it waits data or EOF on the stream. If some data is reached, readpartial returns with the data. If EOF is reached, readpartial raises EOFError.
- !ruby/struct:SM::Flow::P 
  body: When readpartial doesn't blocks, it returns or raises immediately. If the buffer is not empty, it returns the data in the buffer. Otherwise if the stream has some content, it returns the data in the stream. Otherwise if the stream is reached to EOF, it raises EOFError.
- !ruby/struct:SM::Flow::VERB 
  body: "   r, w = IO.pipe           #               buffer          pipe content\n   w &lt;&lt; &quot;abc&quot;               #               &quot;&quot;              &quot;abc&quot;.\n   r.readpartial(4096)      #=&gt; &quot;abc&quot;       &quot;&quot;              &quot;&quot;\n   r.readpartial(4096)      # blocks because buffer and pipe is empty.\n\n   r, w = IO.pipe           #               buffer          pipe content\n   w &lt;&lt; &quot;abc&quot;               #               &quot;&quot;              &quot;abc&quot;\n   w.close                  #               &quot;&quot;              &quot;abc&quot; EOF\n   r.readpartial(4096)      #=&gt; &quot;abc&quot;       &quot;&quot;              EOF\n   r.readpartial(4096)      # raises EOFError\n\n   r, w = IO.pipe           #               buffer          pipe content\n   w &lt;&lt; &quot;abc\\ndef\\n&quot;        #               &quot;&quot;              &quot;abc\\ndef\\n&quot;\n   r.gets                   #=&gt; &quot;abc\\n&quot;     &quot;def\\n&quot;         &quot;&quot;\n   w &lt;&lt; &quot;ghi\\n&quot;             #               &quot;def\\n&quot;         &quot;ghi\\n&quot;\n   r.readpartial(4096)      #=&gt; &quot;def\\n&quot;     &quot;&quot;              &quot;ghi\\n&quot;\n   r.readpartial(4096)      #=&gt; &quot;ghi\\n&quot;     &quot;&quot;              &quot;&quot;\n"
- !ruby/struct:SM::Flow::P 
  body: Note that readpartial is nonblocking-flag insensitive. It blocks even if the nonblocking-flag is set.
- !ruby/struct:SM::Flow::P 
  body: Also note that readpartial behaves similar to sysread in blocking mode. The behavior is identical when the buffer is empty.
full_name: IO#readpartial
is_singleton: false
name: readpartial
params: |
  ios.readpartial(maxlen[, outbuf])    => string, outbuf

visibility: public
