--- !ruby/object:RI::MethodDescription 
aliases: []
block_params: 
comment: 
  - !ruby/struct:SM::Flow::P 
    body: "Returns a new, empty hash. If this hash is subsequently accessed by a key that
      doesn't correspond to a hash entry, the value returned depends on the style of
      <tt>new</tt> used to create the hash. In the first form, the access returns
      <tt>nil</tt>. If <em>obj</em> is specified, this single object will be used for
      all <em>default values</em>. If a block is specified, it will be called with the
      hash object and the key, and should return the default value. It is the block's
      responsibility to store the value in the hash if required."
  - !ruby/struct:SM::Flow::VERB 
    body: |2
         h = Hash.new(&quot;Go Fish&quot;)
         h[&quot;a&quot;] = 100
         h[&quot;b&quot;] = 200
         h[&quot;a&quot;]           #=&gt; 100
         h[&quot;c&quot;]           #=&gt; &quot;Go Fish&quot;
         # The following alters the single default object
         h[&quot;c&quot;].upcase!   #=&gt; &quot;GO FISH&quot;
         h[&quot;d&quot;]           #=&gt; &quot;GO FISH&quot;
         h.keys           #=&gt; [&quot;a&quot;, &quot;b&quot;]

         # While this creates a new default object each time
         h = Hash.new { |hash, key| hash[key] = &quot;Go Fish: #{key}&quot; }
         h[&quot;c&quot;]           #=&gt; &quot;Go Fish: c&quot;
         h[&quot;c&quot;].upcase!   #=&gt; &quot;GO FISH: C&quot;
         h[&quot;d&quot;]           #=&gt; &quot;Go Fish: d&quot;
         h.keys           #=&gt; [&quot;c&quot;, &quot;d&quot;]

full_name: Hash::new
is_singleton: true
name: new
params: >
  Hash.new                          => hash

  Hash.new(obj)                     => aHash

  Hash.new {|hash, key| block }     => aHash

visibility: public