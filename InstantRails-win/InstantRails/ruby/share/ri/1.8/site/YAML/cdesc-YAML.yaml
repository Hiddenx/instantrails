--- !ruby/object:RI::ClassDescription 
attributes: []
class_methods: 
  - !ruby/object:RI::MethodSummary 
    name: add_builtin_type
  - !ruby/object:RI::MethodSummary 
    name: add_domain_type
  - !ruby/object:RI::MethodSummary 
    name: add_private_type
  - !ruby/object:RI::MethodSummary 
    name: add_ruby_type
  - !ruby/object:RI::MethodSummary 
    name: detect_implicit
  - !ruby/object:RI::MethodSummary 
    name: dump
  - !ruby/object:RI::MethodSummary 
    name: dump_stream
  - !ruby/object:RI::MethodSummary 
    name: each_document
  - !ruby/object:RI::MethodSummary 
    name: each_node
  - !ruby/object:RI::MethodSummary 
    name: load
  - !ruby/object:RI::MethodSummary 
    name: load_documents
  - !ruby/object:RI::MethodSummary 
    name: load_file
  - !ruby/object:RI::MethodSummary 
    name: load_stream
  - !ruby/object:RI::MethodSummary 
    name: object_maker
  - !ruby/object:RI::MethodSummary 
    name: parse
  - !ruby/object:RI::MethodSummary 
    name: parse_documents
  - !ruby/object:RI::MethodSummary 
    name: parse_file
  - !ruby/object:RI::MethodSummary 
    name: quick_emit
  - !ruby/object:RI::MethodSummary 
    name: read_type_class
  - !ruby/object:RI::MethodSummary 
    name: transfer
  - !ruby/object:RI::MethodSummary 
    name: try_implicit
comment: 
  - !ruby/struct:SM::Flow::H 
    level: 2
    text: 
      - YAML
  - !ruby/struct:SM::Flow::P 
    body: "YAML(tm) (rhymes with 'camel') is a straightforward machine parsable data
      serialization format designed for human readability and interaction with
      scripting languages such as Perl and Python. YAML is optimized for data
      serialization, formatted dumping, configuration files, log files, Internet
      messaging and filtering. This specification describes the YAML information model
      and serialization format. Together with the Unicode standard for characters, it
      provides all the information necessary to understand YAML Version 1.0 and
      construct computer programs to process it."
  - !ruby/struct:SM::Flow::P 
    body: "See http://yaml.org/ for more information. For a quick tutorial, please visit
      YAML In Five Minutes (http://yaml.kwiki.org/?YamlInFiveMinutes)."
  - !ruby/struct:SM::Flow::H 
    level: 2
    text: 
      - About This Library
  - !ruby/struct:SM::Flow::P 
    body: "The YAML 1.0 specification outlines four stages of YAML loading and dumping.
      This library honors all four of those stages, although data is really only
      available to you in three stages."
  - !ruby/struct:SM::Flow::P 
    body: "The four stages are: native, representation, serialization, and presentation."
  - !ruby/struct:SM::Flow::P 
    body: "The native stage refers to data which has been loaded completely into Ruby's own
      types. (See +YAML::load+.)"
  - !ruby/struct:SM::Flow::P 
    body: "The representation stage means data which has been composed into
      +YAML::BaseNode+ objects. In this stage, the document is available as a tree of
      node objects. You can perform YPath queries and transformations at this level.
      (See +YAML::parse+.)"
  - !ruby/struct:SM::Flow::P 
    body: The serialization stage happens inside the parser. The YAML parser used in Ruby is called Syck. Serialized nodes are available in the extension as SyckNode structs.
  - !ruby/struct:SM::Flow::P 
    body: The presentation stage is the YAML document itself. This is accessible to you as a string. (See +YAML::dump+.)
  - !ruby/struct:SM::Flow::P 
    body: "For more information about the various information models, see Chapter 3 of the
      YAML 1.0 Specification (http://yaml.org/spec/#id2491269)."
  - !ruby/struct:SM::Flow::P 
    body: The YAML module provides quick access to the most common loading (YAML::load) and dumping (YAML::dump) tasks. This module also provides an API for registering global types (YAML::add_domain_type).
  - !ruby/struct:SM::Flow::H 
    level: 2
    text: 
      - Example
  - !ruby/struct:SM::Flow::P 
    body: A simple round-trip (load and dump) of an object.
  - !ruby/struct:SM::Flow::VERB 
    body: |2
          require &quot;yaml&quot;

          test_obj = [&quot;dogs&quot;, &quot;cats&quot;, &quot;badgers&quot;]

          yaml_obj = YAML::dump( test_obj )
                              # -&gt; ---
                                   - dogs
                                   - cats
                                   - badgers
          ruby_obj = YAML::load( yaml_obj )
                              # =&gt; [&quot;dogs&quot;, &quot;cats&quot;, &quot;badgers&quot;]
          ruby_obj == test_obj
                              # =&gt; true

  - !ruby/struct:SM::Flow::P 
    body: "To register your custom types with the global loader, use
      <tt>add_domain_type</tt>."
  - !ruby/struct:SM::Flow::VERB 
    body: |2
          YAML::add_domain_type( &quot;your-site.com,2004&quot;, &quot;widget&quot; ) do |type, val|
              Widget.new( val )
          end

constants: []
full_name: YAML
includes: []
instance_methods: []
name: YAML
superclass: 