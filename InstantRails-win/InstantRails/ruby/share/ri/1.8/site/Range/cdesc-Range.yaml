--- !ruby/object:RI::ClassDescription 
attributes: []
class_methods: 
  - !ruby/object:RI::MethodSummary 
    name: new
comment: 
  - !ruby/struct:SM::Flow::P 
    body: "A <tt>Range</tt> represents an interval---a set of values with a start and an
      end. Ranges may be constructed using the <em>s</em><tt>..</tt><em>e</em> and
      <em>s</em><tt>...</tt><em>e</em> literals, or with <tt>Range::new</tt>. Ranges
      constructed using <tt>..</tt> run from the start to the end inclusively. Those
      created using <tt>...</tt> exclude the end value. When used as an iterator,
      ranges return each value in the sequence."
  - !ruby/struct:SM::Flow::VERB 
    body: |2
         (-1..-5).to_a      #=&gt; []
         (-5..-1).to_a      #=&gt; [-5, -4, -3, -2, -1]
         ('a'..'e').to_a    #=&gt; [&quot;a&quot;, &quot;b&quot;, &quot;c&quot;, &quot;d&quot;, &quot;e&quot;]
         ('a'...'e').to_a   #=&gt; [&quot;a&quot;, &quot;b&quot;, &quot;c&quot;, &quot;d&quot;]

  - !ruby/struct:SM::Flow::P 
    body: "Ranges can be constructed using objects of any type, as long as the objects can
      be compared using their <tt>&lt;=&gt;</tt> operator and they support the
      <tt>succ</tt> method to return the next object in sequence."
  - !ruby/struct:SM::Flow::VERB 
    body: |2
         class Xs                # represent a string of 'x's
           include Comparable
           attr :length
           def initialize(n)
             @length = n
           end
           def succ
             Xs.new(@length + 1)
           end
           def &lt;=&gt;(other)
             @length &lt;=&gt; other.length
           end
           def to_s
             sprintf &quot;%2d #{inspect}&quot;, @length
           end
           def inspect
             'x' * @length
           end
         end

         r = Xs.new(3)..Xs.new(6)   #=&gt; xxx..xxxxxx
         r.to_a                     #=&gt; [xxx, xxxx, xxxxx, xxxxxx]
         r.member?(Xs.new(5))       #=&gt; true

  - !ruby/struct:SM::Flow::P 
    body: "In the previous code example, class <tt>Xs</tt> includes the <tt>Comparable</tt>
      module. This is because <tt>Enumerable#member?</tt> checks for equality using
      <tt>==</tt>. Including <tt>Comparable</tt> ensures that the <tt>==</tt> method
      is defined in terms of the <tt>&lt;=&gt;</tt> method implemented in
      <tt>Xs</tt>."
constants: []
full_name: Range
includes: 
  - !ruby/object:RI::IncludedModule 
    name: Enumerable
instance_methods: 
  - !ruby/object:RI::MethodSummary 
    name: "=="
  - !ruby/object:RI::MethodSummary 
    name: "==="
  - !ruby/object:RI::MethodSummary 
    name: begin
  - !ruby/object:RI::MethodSummary 
    name: each
  - !ruby/object:RI::MethodSummary 
    name: end
  - !ruby/object:RI::MethodSummary 
    name: "eql?"
  - !ruby/object:RI::MethodSummary 
    name: "exclude_end?"
  - !ruby/object:RI::MethodSummary 
    name: first
  - !ruby/object:RI::MethodSummary 
    name: hash
  - !ruby/object:RI::MethodSummary 
    name: "include?"
  - !ruby/object:RI::MethodSummary 
    name: inspect
  - !ruby/object:RI::MethodSummary 
    name: last
  - !ruby/object:RI::MethodSummary 
    name: "member?"
  - !ruby/object:RI::MethodSummary 
    name: step
  - !ruby/object:RI::MethodSummary 
    name: to_s
name: Range
superclass: Object