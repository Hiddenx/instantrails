--- !ruby/object:RI::MethodDescription 
aliases: []
block_params: 
comment: 
  - !ruby/struct:SM::Flow::P 
    body: "Prevents the current class from responding to calls to the named method.
      Contrast this with <tt>remove_method</tt>, which deletes the method from the
      particular class; Ruby will still search superclasses and mixed-in modules for a
      possible receiver."
  - !ruby/struct:SM::Flow::VERB 
    body: |2
         class Parent
           def hello
             puts &quot;In parent&quot;
           end
         end
         class Child &lt; Parent
           def hello
             puts &quot;In child&quot;
           end
         end

         c = Child.new
         c.hello

         class Child
           remove_method :hello  # remove from child, still in parent
         end
         c.hello

         class Child
           undef_method :hello   # prevent any calls to 'hello'
         end
         c.hello

  - !ruby/struct:SM::Flow::P 
    body: "<em>produces:</em>"
  - !ruby/struct:SM::Flow::VERB 
    body: |2
         In child
         In parent
         prog.rb:23: undefined method `hello' for #&lt;Child:0x401b3bb4&gt; (NoMethodError)

full_name: Module#undef_method
is_singleton: false
name: undef_method
params: "undef_method(symbol)    => self

  "
visibility: public