--- !ruby/object:RI::MethodDescription 
aliases: []
block_params: 
comment: 
  - !ruby/struct:SM::Flow::P 
    body: "Creates module functions for the named methods. These functions may be called
      with the module as a receiver, and also become available as instance methods to
      classes that mix in the module. Module functions are copies of the original, and
      so may be changed independently. The instance-method versions are made private.
      If used with no arguments, subsequently defined methods become module
      functions."
  - !ruby/struct:SM::Flow::VERB 
    body: |2
         module Mod
           def one
             &quot;This is one&quot;
           end
           module_function :one
         end
         class Cls
           include Mod
           def callOne
             one
           end
         end
         Mod.one     #=&gt; &quot;This is one&quot;
         c = Cls.new
         c.callOne   #=&gt; &quot;This is one&quot;
         module Mod
           def one
             &quot;This is the new one&quot;
           end
         end
         Mod.one     #=&gt; &quot;This is one&quot;
         c.callOne   #=&gt; &quot;This is the new one&quot;

full_name: Module#module_function
is_singleton: false
name: module_function
params: "module_function(symbol, ...)    => self

  "
visibility: public