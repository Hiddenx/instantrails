--- !ruby/object:RI::MethodDescription 
aliases: []
block_params: 
comment: 
  - !ruby/struct:SM::Flow::P 
    body: "Bind <em>umeth</em> to <em>obj</em>. If <tt>Klass</tt> was the class from which
      <em>umeth</em> was obtained, <tt>obj.kind_of?(Klass)</tt> must be true."
  - !ruby/struct:SM::Flow::VERB 
    body: |2
         class A
           def test
             puts &quot;In test, class = #{self.class}&quot;
           end
         end
         class B &lt; A
         end
         class C &lt; B
         end

         um = B.instance_method(:test)
         bm = um.bind(C.new)
         bm.call
         bm = um.bind(B.new)
         bm.call
         bm = um.bind(A.new)
         bm.call

  - !ruby/struct:SM::Flow::P 
    body: "<em>produces:</em>"
  - !ruby/struct:SM::Flow::VERB 
    body: |2
         In test, class = C
         In test, class = B
         prog.rb:16:in `bind': bind argument must be an instance of B (TypeError)
          from prog.rb:16

full_name: UnboundMethod#bind
is_singleton: false
name: bind
params: "umeth.bind(obj) -> method

  "
visibility: public