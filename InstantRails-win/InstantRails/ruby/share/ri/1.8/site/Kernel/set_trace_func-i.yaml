--- !ruby/object:RI::MethodDescription 
aliases: []
block_params: 
comment: 
  - !ruby/struct:SM::Flow::P 
    body: "Establishes <em>proc</em> as the handler for tracing, or disables tracing if the
      parameter is <tt>nil</tt>. <em>proc</em> takes up to six parameters: an event
      name, a filename, a line number, an object id, a binding, and the name of a
      class. <em>proc</em> is invoked whenever an event occurs. Events are:
      <tt>c-call</tt> (call a C-language routine), <tt>c-return</tt> (return from a
      C-language routine), <tt>call</tt> (call a Ruby method), <tt>class</tt> (start a
      class or module definition), <tt>end</tt> (finish a class or module definition),
      <tt>line</tt> (execute code on a new line), <tt>raise</tt> (raise an exception),
      and <tt>return</tt> (return from a Ruby method). Tracing is disabled within the
      context of <em>proc</em>."
  - !ruby/struct:SM::Flow::VERB 
    body: |2
          class Test
          def test
            a = 1
            b = 2
          end
          end

          set_trace_func proc { |event, file, line, id, binding, classname|
             printf &quot;%8s %s:%-2d %10s %8s\n&quot;, event, file, line, id, classname
          }
          t = Test.new
          t.test

            line prog.rb:11               false
          c-call prog.rb:11        new    Class
          c-call prog.rb:11 initialize   Object
        c-return prog.rb:11 initialize   Object
        c-return prog.rb:11        new    Class
            line prog.rb:12               false
            call prog.rb:2        test     Test
            line prog.rb:3        test     Test
            line prog.rb:4        test     Test
          return prog.rb:4        test     Test

full_name: Kernel#set_trace_func
is_singleton: false
name: set_trace_func
params: >
  set_trace_func(proc)    => proc

  set_trace_func(nil)     => nil

visibility: public