--- !ruby/object:RI::MethodDescription 
aliases: []
block_params: 
comment: 
  - !ruby/struct:SM::Flow::P 
    body: "Returns true if <em>path</em> matches against <em>pattern</em> The pattern is
      not a regular expression; instead it follows rules similar to shell filename
      globbing. It may contain the following metacharacters:"
  - !ruby/struct:SM::Flow::P 
    body: "<em>flags</em> is a bitwise OR of the <tt>FNM_xxx</tt> parameters. The same glob
      pattern and flags are used by <tt>Dir::glob</tt>."
  - !ruby/struct:SM::Flow::VERB 
    body: |2
         File.fnmatch('cat',       'cat')        #=&gt; true
         File.fnmatch('cat',       'category')   #=&gt; false
         File.fnmatch('c{at,ub}s', 'cats')       #=&gt; false
         File.fnmatch('c{at,ub}s', 'cubs')       #=&gt; false
         File.fnmatch('c{at,ub}s', 'cat')        #=&gt; false

         File.fnmatch('c?t',    'cat')                       #=&gt; true
         File.fnmatch('c\?t',   'cat')                       #=&gt; false
         File.fnmatch('c??t',   'cat')                       #=&gt; false
         File.fnmatch('c*',     'cats')                      #=&gt; true
         File.fnmatch('c/ * FIXME * /t', 'c/a/b/c/t')                 #=&gt; true
         File.fnmatch('c*t',    'cat')                       #=&gt; true
         File.fnmatch('c\at',   'cat')                       #=&gt; true
         File.fnmatch('c\at',   'cat', File::FNM_NOESCAPE)   #=&gt; false
         File.fnmatch('a?b',    'a/b')                       #=&gt; true
         File.fnmatch('a?b',    'a/b', File::FNM_PATHNAME)   #=&gt; false

         File.fnmatch('*',   '.profile')                            #=&gt; false
         File.fnmatch('*',   '.profile', File::FNM_DOTMATCH)        #=&gt; true
         File.fnmatch('*',   'dave/.profile')                       #=&gt; true
         File.fnmatch('*',   'dave/.profile', File::FNM_DOTMATCH)   #=&gt; true
         File.fnmatch('*',   'dave/.profile', File::FNM_PATHNAME)   #=&gt; false
         File.fnmatch('* / FIXME *', 'dave/.profile', File::FNM_PATHNAME)   #=&gt; false
         STRICT = File::FNM_PATHNAME | File::FNM_DOTMATCH
         File.fnmatch('* / FIXME *', 'dave/.profile', STRICT)               #=&gt; true

full_name: "File::fnmatch?"
is_singleton: true
name: "fnmatch?"
params: >
  File.fnmatch( pattern, path, [flags] ) => (true or false)

  File.fnmatch?( pattern, path, [flags] ) => (true or false)

visibility: public