--- !ruby/object:RI::ClassDescription 
attributes: []
class_methods: []
comment: 
  - !ruby/struct:SM::Flow::P 
    body: "Continuation objects are generated by <tt>Kernel#callcc</tt>. They hold a return
      address and execution context, allowing a nonlocal return to the end of the
      <tt>callcc</tt> block from anywhere within a program. Continuations are somewhat
      analogous to a structured version of C's <tt>setjmp/longjmp</tt> (although they
      contain more state, so you might consider them closer to threads)."
  - !ruby/struct:SM::Flow::P 
    body: "For instance:"
  - !ruby/struct:SM::Flow::VERB 
    body: |2
         arr = [ &quot;Freddie&quot;, &quot;Herbie&quot;, &quot;Ron&quot;, &quot;Max&quot;, &quot;Ringo&quot; ]
         callcc{|$cc|}
         puts(message = arr.shift)
         $cc.call unless message =~ /Max/

  - !ruby/struct:SM::Flow::P 
    body: "<em>produces:</em>"
  - !ruby/struct:SM::Flow::VERB 
    body: |2
         Freddie
         Herbie
         Ron
         Max

  - !ruby/struct:SM::Flow::P 
    body: "This (somewhat contrived) example allows the inner loop to abandon processing
      early:"
  - !ruby/struct:SM::Flow::VERB 
    body: |2
         callcc {|cont|
           for i in 0..4
             print &quot;\n#{i}: &quot;
             for j in i*5...(i+1)*5
               cont.call() if j == 17
               printf &quot;%3d&quot;, j
             end
           end
         }
         print &quot;\n&quot;

  - !ruby/struct:SM::Flow::P 
    body: "<em>produces:</em>"
  - !ruby/struct:SM::Flow::VERB 
    body: |2
         0:   0  1  2  3  4
         1:   5  6  7  8  9
         2:  10 11 12 13 14
         3:  15 16

constants: []
full_name: Continuation
includes: []
instance_methods: 
  - !ruby/object:RI::MethodSummary 
    name: "[]"
  - !ruby/object:RI::MethodSummary 
    name: call
name: Continuation
superclass: Object