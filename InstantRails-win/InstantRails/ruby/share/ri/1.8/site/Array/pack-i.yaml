--- !ruby/object:RI::MethodDescription 
aliases: []
block_params: 
comment: 
  - !ruby/struct:SM::Flow::P 
    body: "Packs the contents of <em>arr</em> into a binary sequence according to the
      directives in <em>aTemplateString</em> (see the table below) Directives ``A,''
      ``a,'' and ``Z'' may be followed by a count, which gives the width of the
      resulting field. The remaining directives also may take a count, indicating the
      number of array elements to convert. If the count is an asterisk
      (``<tt>*</tt>''), all remaining array elements will be converted. Any of the
      directives ``<tt>sSiIlL</tt>'' may be followed by an underscore (``<tt>_</tt>'')
      to use the underlying platform's native size for the specified type; otherwise,
      they use a platform-independent size. Spaces are ignored in the template string.
      See also <tt>String#unpack</tt>."
  - !ruby/struct:SM::Flow::VERB 
    body: |2
         a = [ &quot;a&quot;, &quot;b&quot;, &quot;c&quot; ]
         n = [ 65, 66, 67 ]
         a.pack(&quot;A3A3A3&quot;)   #=&gt; &quot;a  b  c  &quot;
         a.pack(&quot;a3a3a3&quot;)   #=&gt; &quot;a\000\000b\000\000c\000\000&quot;
         n.pack(&quot;ccc&quot;)      #=&gt; &quot;ABC&quot;

  - !ruby/struct:SM::Flow::P 
    body: Directives for <tt>pack</tt>.
  - !ruby/struct:SM::Flow::VERB 
    body: |2
       Directive    Meaning
       ---------------------------------------------------------------
           @     |  Moves to absolute position
           A     |  ASCII string (space padded, count is width)
           a     |  ASCII string (null padded, count is width)
           B     |  Bit string (descending bit order)
           b     |  Bit string (ascending bit order)
           C     |  Unsigned char
           c     |  Char
           D, d  |  Double-precision float, native format
           E     |  Double-precision float, little-endian byte order
           e     |  Single-precision float, little-endian byte order
           F, f  |  Single-precision float, native format
           G     |  Double-precision float, network (big-endian) byte order
           g     |  Single-precision float, network (big-endian) byte order
           H     |  Hex string (high nibble first)
           h     |  Hex string (low nibble first)
           I     |  Unsigned integer
           i     |  Integer
           L     |  Unsigned long
           l     |  Long
           M     |  Quoted printable, MIME encoding (see RFC2045)
           m     |  Base64 encoded string
           N     |  Long, network (big-endian) byte order
           n     |  Short, network (big-endian) byte-order
           P     |  Pointer to a structure (fixed-length string)
           p     |  Pointer to a null-terminated string
           Q, q  |  64-bit number
           S     |  Unsigned short
           s     |  Short
           U     |  UTF-8
           u     |  UU-encoded string
           V     |  Long, little-endian byte order
           v     |  Short, little-endian byte order
           w     |  BER-compressed integer\fnm
           X     |  Back up a byte
           x     |  Null byte
           Z     |  Same as ``a'', except that null is added with *

full_name: Array#pack
is_singleton: false
name: pack
params: "arr.pack ( aTemplateString ) -> aBinaryString

  "
visibility: public