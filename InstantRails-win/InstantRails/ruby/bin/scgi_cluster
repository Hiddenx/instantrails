#!/usr/bin/env ruby
require 'drb'
begin
    require 'rubygems'
rescue
    # ignored so people don't *have* to have rubygems
end

require 'scgi'
require 'cmdparse'
require 'yaml'
require 'highline'

UI = HighLine.new
DEFAULT_CLUSTER_CONFIG = "config/scgi-cluster.yaml"
DEFAULT_CLUSTER_CHILDREN = "config/scgi-children.yaml"

def password
    if not $password
        $password = UI.ask("Password: ")
    end
    
    return $password
end

def print_verbose_status(s)
    times = s[:systimes]
        
    puts <<-END
#{UI.color("Status as of #{s[:time]}:",:green,:bold)}
PID: #{s[:pid]}\tStarted: #{s[:started]}\tEnvironment: #{s[:env]}
Connected Requests: #{s[:conns]}
Conns/Second: #{s[:throttle] || "Not Set"}
Total Conns: #{s[:total_conns]}
Max Simultaneous Conns: #{s[:max_conns]}
Shutdown Started: #{s[:shutdown]}
Processing Time:  #{times.utime} #{times.stime} #{times.cutime} #{times.cstime}
Current Settings:
#{s[:settings].to_yaml.gsub(/:([a-z])/, '   \1')}
END
end


def print_short_status(s)
    times = s[:systimes]
    total_time = times.utime + times.stime
    
    # setup some nice colors for different states
    if s[:shutdown]
        s[:shutdown] = UI.color(s[:shutdown].to_s, :red)
    end
    
    if s[:conns] > s[:max_conns]
        s[:conns] = UI.color(s[:conns], :red)
    end
        
    puts "#{s[:pid]}\t#{s[:conns]}/#{s[:max_conns]}\t#{s[:total_conns]}\t#{s[:throttle] || 'NA'}\t#{s[:shutdown]}\t#{total_time}"
end

def make_command(parent, name, desc, options=[])
    cmd = CmdParse::Command.new(name, false )
    cmd.short_desc = desc
    settings = {}
    cmd.options = CmdParse::OptionParserWrapper.new do |opt|
        options.each do |short, long, info, symbol|
            opt.on(short, long, info) {|val| settings[symbol] = val}
        end
    end
    cmd.set_execution_block do |args|
        begin
            yield(settings, args)
        rescue Object
            STDERR.puts "ERROR: #$!"
        end
    end
    parent.add_command(cmd)
end


def with_config_files
    cluster_configs = YAML.load_file(DEFAULT_CLUSTER_CONFIG)
    cluster_configs.each do |config|
        yield config
    end
end

def with_children
    children = YAML.load_file(DEFAULT_CLUSTER_CHILDREN)
    children.each do |pid, info|
        config = YAML.load_file(info[:config])
        yield pid, info, config
    end
end

cmd = CmdParse::CommandParser.new( true )
cmd.program_name = "scgi_cluster"
cmd.program_version = [0, 4, 3]


cmd.add_command( CmdParse::HelpCommand.new )
cmd.add_command( CmdParse::VersionCommand.new )

make_command(cmd, 'config', "Configure the SCGI processor cluster", 
[['-e','--env STRING','Rails environment', :env],
['-h','--host STRING', 'IP address to bind as server', :host],
['-p','--port NUMBER', 'BASE Port to bind to (starts at 9999)', :port],
['-l','--log-file PATH', 'Use a different log from from log/scgi.log', :logfile],
['-t','--throttle NUMBER', 'Max conn/second to allow.', :throttle],
['-m','--max-conns NUMBER', 'Max simultaneous connections before the busy message', :maxconns],
['-c','--children NUMBER', 'Number of children to configure', :children],
['-S','--disable-signals', 'Turn off POSIX signals leaving only network control', :disable_signals],
['-D','--disable-net', 'Turn off network control leaving only POSIX signals', :disable_drb],
['-P','--moron-mode PASSWORD', 'You are an idiot and you want your password on the command line', :password],
['-M','--merge', 'Merge new settings with previous rather than defaults', :merge]]) do |settings, args|
    children = (settings[:children] || "1").to_i
    settings[:password] = settings[:password] || UI.ask("What password do you want? ")
    UI.say("Configuring #{children} SCGI processors.")
    
    cluster_configs = []
    start_port = (settings[:port] || "9999").to_i
    children.times do |child_num|
        settings[:config] = "config/scgi-#{child_num}.yaml"
        settings[:port] = start_port + child_num
        conf = SCGI::Configuration.new(settings)
        conf.configure
        UI.say("Wrote: #{settings[:config]}")
        cluster_configs << settings[:config]
    end
    
    open(DEFAULT_CLUSTER_CONFIG,"w") {|f| f.write(cluster_configs.to_yaml)}
end


make_command(cmd, 'start', "Start the application",
[['-r','--run-path PATH', 'Change to this directory before trying to start', :run_path]]) do |settings, args|
    if File.exist?(DEFAULT_CLUSTER_CHILDREN)
        STDERR.puts "ERROR: #{DEFAULT_CLUSTER_CHILDREN} exists.  Either properly use stop or delete the file."
        exit 1
    end
    
    children = {}

    with_config_files do |config|
        cmd = File.dirname(__FILE__) + "/scgi_service"
        kicker = SCGI::Kicker.new(config, settings[:run_path])
        pid = kicker.start(cmd)
        children[pid] = { :command => cmd, :config => config}
    end
    
    open(DEFAULT_CLUSTER_CHILDREN,"w") { |f| f.write(children.to_yaml) }
end

make_command(cmd, 'list', "List the currently running SCGI processors") do |settings, args|
    with_children do |pid, info, config|
        UI.say("#{pid}: #{info[:config]} -- #{config[:host]}:#{config[:port]} -- #{config[:control_url]}")
    end
end


make_command(cmd, 'reconfig', "Reconfigure the SCGI servers with a new config") do |settings, args|
    with_children do |pid,info,config|
        client = SCGI::ControlClient.new(settings, config[:config], config[:control_url], password)
        client.reconfigure
    end
end

make_command(cmd, 'status', "Get status",
[['-v','--verbose', 'Verbose status for all processes', :verbose]]) do |settings, args|
    with_children do |pid,info,config|
        client = SCGI::ControlClient.new(settings, config[:config], config[:control_url], password)
        if settings[:verbose]
            print_verbose_status(client.status)
            UI.say("ENTER for Next:")
        else
            print_short_status(client.status)
        end
    end
end

make_command(cmd, 'stop', "Stop the application",
[['-f','--force', 'Forced shutdown rather than graceful (default graceful)', :force]]) do |settings, args|
    with_children do |pid,info,config|
        client = SCGI::ControlClient.new(settings, config[:config], config[:control_url], password)
        client.stop
    end
    
    File.unlink(DEFAULT_CLUSTER_CHILDREN)
end

make_command(cmd, 'restart', "Restart the application",
[['-f','--force', 'Forced shutdown rather than graceful (default graceful)', :force]]) do |settings, args|
    with_children do |pid,info,config|
        client = SCGI::ControlClient.new(settings, config[:config], config[:control_url], password)
        client.restart
    end
end


make_command(cmd, 'monitor', "Monitor the application") do |settings, args|
    while true
        puts "\e[2J\e[0;0H"
        with_children do |pid,info,config|
            client = SCGI::ControlClient.new(settings, config[:config], config[:control_url], password)
            print_short_status(client.status)
        end
        sleep 3
    end
end

cmd.parse
